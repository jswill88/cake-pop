[{"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/index.js":"1","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/App.js":"2","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/reportWebVitals.js":"3","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/Synth.js":"4","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/ButtonLabel.js":"5","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/lib/noteInfo.js":"6","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/lib/synthInfo.js":"7","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/Header.js":"8","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/PrimaryButtons.js":"9","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/NoteRow.js":"10","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/hooks/ajax.js":"11","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/SignInForm.js":"12","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/context/context.js":"13","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/SubHeader.js":"14","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/SongDropDown.js":"15","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/Controls.js":"16","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/NoteColumns.js":"17"},{"size":500,"mtime":1609833079505,"results":"18","hashOfConfig":"19"},{"size":691,"mtime":1613984524671,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1609833079506,"results":"21","hashOfConfig":"19"},{"size":727,"mtime":1614031554665,"results":"22","hashOfConfig":"19"},{"size":501,"mtime":1613984524671,"results":"23","hashOfConfig":"19"},{"size":386,"mtime":1610957441589,"results":"24","hashOfConfig":"19"},{"size":1144,"mtime":1610957441589,"results":"25","hashOfConfig":"19"},{"size":1391,"mtime":1613875837170,"results":"26","hashOfConfig":"19"},{"size":1441,"mtime":1614034829297,"results":"27","hashOfConfig":"19"},{"size":3727,"mtime":1614027933394,"results":"28","hashOfConfig":"19"},{"size":433,"mtime":1613796796901,"results":"29","hashOfConfig":"19"},{"size":4752,"mtime":1613796796898,"results":"30","hashOfConfig":"19"},{"size":11607,"mtime":1614034951100,"results":"31","hashOfConfig":"19"},{"size":4636,"mtime":1613984524675,"results":"32","hashOfConfig":"19"},{"size":752,"mtime":1613875837171,"results":"33","hashOfConfig":"19"},{"size":4418,"mtime":1613984524672,"results":"34","hashOfConfig":"19"},{"size":3585,"mtime":1614036483065,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"w46qhf",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/index.js",[],["74","75"],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/App.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/reportWebVitals.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/Synth.js",["76"],"import { useContext } from 'react';\nimport NoteRow from './NoteRow';\nimport NoteColumns from './NoteColumns'\nimport { Context } from '../context/context';\nimport { Row } from 'antd';\n\nexport default function Synth() {\n\n  const {\n    noteSwitches,\n  } = useContext(Context)\n\n\n  return (\n    <>\n\n      {\n        ('high' in noteSwitches) &&\n        <>\n          {/* {Object.keys(noteSwitches).map(noteRow =>\n            <NoteRow\n              key={noteRow}\n              noteRow={noteRow}\n            />\n          )} */}\n          {/* <NoteRow /> */}\n          <Row\n            justify=\"space-between\"\n          >\n            {/* {NoteColumns()} */}\n            <NoteColumns />\n          </Row>\n        </>\n      }\n    </ >\n  )\n}\n","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/ButtonLabel.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/lib/noteInfo.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/lib/synthInfo.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/Header.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/PrimaryButtons.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/NoteRow.js",["77","78","79","80","81","82","83","84","85"],"import ButtonLabel from './ButtonLabel'\nimport { Context } from '../context/context'\nimport { useContext } from 'react'\n\nimport { InlineIcon } from '@iconify/react';\nimport musicClefTreble from '@iconify-icons/mdi/music-clef-treble';\nimport musicClefBass from '@iconify-icons/mdi/music-clef-bass';\nimport drumIcon from '@iconify-icons/la/drum';\n\n\n\n\n\nimport {\n  Row,\n  Button,\n  Divider\n} from 'antd'\n\n\nexport default function NoteRow({\n  // noteRow,\n}) {\n  const {\n    Tone,\n    currentBeat,\n    NOTES,\n    makeSynth,\n    loopLength,\n    noteSwitches,\n    setNoteSwitches\n  } = useContext(Context)\n\n  const addSynth = (beat, note, row) => {\n    if (!noteSwitches[row][beat]) {\n\n      const arrLoop = new Array(loopLength).fill([])\n      arrLoop[beat] = note;\n\n      let type;\n      if (['bassHigh', 'bassLow'].includes(row)) type = 'bassSynth'\n      else if (['high', 'mid', 'low'].includes(row)) type = 'chordSynth'\n      else type = row;\n      const synth = makeSynth(type);\n\n      const loop = new Tone.Sequence((time, note) => {\n        if (type === 'snareDrum') synth.triggerAttackRelease('8n', time)\n        else synth.triggerAttackRelease(note, '8n', time)\n      }, arrLoop).start(0);\n      setNoteSwitches(obj => ({ ...obj, [row]: { ...obj[row], [beat]: loop } }));\n    } else {\n      noteSwitches[row][beat].stop();\n      noteSwitches[row][beat].cancel();\n      setNoteSwitches(obj => ({ ...obj, [row]: { ...obj[row], [beat]: false } }));\n    }\n  }\n\n  const getNote = (noteRow, i) => {\n    let note;\n    if (['bassDrum', 'snareDrum', 'cymbal'].includes(noteRow)) {\n      note = NOTES[noteRow][Math.floor(i / loopLength * 4)];\n    } else {\n      note = NOTES[noteRow][Math.floor(i / loopLength * 4)] + (noteRow.includes('bass') ? 3 : 5);\n    }\n    return note;\n  }\n\n  const getNoteName = (noteRow, i) => {\n    let noteName;\n    if (['bassDrum', 'snareDrum', 'cymbal'].includes(noteRow)) {\n      noteName = noteRow[0].toUpperCase() + (noteRow === 'cymbal' ? '' : 'D');\n    } else {\n      noteName = NOTES[noteRow][Math.floor(i / loopLength * 4)]\n    }\n    return noteName;\n  }\n\n  return (\n    <Row>\n\n    </Row>\n  )\n    // <Row\n    //   key={noteRow}\n    //   justify=\"space-between\"\n    //   align=\"middle\"\n    // >\n    //   <Icon\n    //   noteRow={noteRow}\n    //   />\n    //   {Object.keys(noteSwitches[noteRow]).map((beat, i) =>\n    //     <>\n    //       <Button\n    //         shape=\"circle\"\n    //         onClick={() => {\n    //           const note = getNote(noteRow, i)\n    //           addSynth(beat, note, noteRow)\n    //         }}\n    //         key={beat}\n    //         style={{ overflow: 'hidden' }}\n    //       >\n    //         <ButtonLabel\n    //           beat={noteSwitches[noteRow][beat]}\n    //           active={i === currentBeat}\n    //           note={getNoteName(noteRow, i)}\n    //         />\n    //       </Button>\n    //       {!((parseInt(beat) + 1) % (loopLength / 4)) && ((parseInt(beat) + 1) !== loopLength) &&\n    //         <Divider\n    //           type=\"vertical\"\n    //         />\n    //       }\n    //     </>\n    //   )}\n    //   {['low', 'bassLow', 'bassDrum'].includes(noteRow) && <Divider />}\n    // </Row>\n\n}\n\n\n\nfunction Icon({noteRow}) {\n  switch (noteRow) {\n    case 'high':\n    case 'low':\n    case 'mid':\n      return <InlineIcon\n        style={{ fontSize: '1.5rem' }}\n        icon={musicClefTreble} />\n    case 'bassHigh':\n    case 'bassLow':\n      return <InlineIcon\n        style={{ fontSize: '1.5rem' }}\n        icon={musicClefBass} />\n    case 'bassDrum':\n    case 'snareDrum':\n    case 'cymbal':\n      return <InlineIcon\n        style={{ fontSize: '1.5rem' }}\n        icon={drumIcon} />\n    default:\n      return null\n  }\n}\n\n// make component for each subset of row","/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/hooks/ajax.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/SignInForm.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/context/context.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/SubHeader.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/SongDropDown.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/Controls.js",[],"/Users/joshuawilliams/Documents/personalProjects/synth-practice/src/components/NoteColumns.js",["86"],"import ButtonLabel from './ButtonLabel'\nimport { Context } from '../context/context'\nimport { useContext } from 'react'\nimport { Row, Button, Divider, Col, Typography } from 'antd';\nconst { Text } = Typography;\n\nexport default function NoteColumns() {\n  const {\n    Tone,\n    currentBeat,\n    NOTES,\n    makeSynth,\n    loopLength,\n    noteSwitches,\n    setNoteSwitches,\n    // prog\n  } = useContext(Context)\n\n  const addSynth = (beat, note, row) => {\n    if (!noteSwitches[row][beat]) {\n\n      const arrLoop = new Array(loopLength).fill([])\n      arrLoop[beat] = note;\n\n      let type;\n      if (['bassHigh', 'bassLow'].includes(row)) type = 'bassSynth'\n      else if (['high', 'mid', 'low'].includes(row)) type = 'chordSynth'\n      else type = row;\n      const synth = makeSynth(type);\n\n      const loop = new Tone.Sequence((time, note) => {\n        if (type === 'snareDrum') synth.triggerAttackRelease('8n', time)\n        else synth.triggerAttackRelease(note, '8n', time)\n      }, arrLoop).start(0);\n      setNoteSwitches(obj => ({ ...obj, [row]: { ...obj[row], [beat]: loop } }));\n    } else {\n      noteSwitches[row][beat].stop();\n      noteSwitches[row][beat].cancel();\n      setNoteSwitches(obj => ({ ...obj, [row]: { ...obj[row], [beat]: false } }));\n    }\n  }\n\n  const getNote = (noteRow, i) => {\n    let note;\n    if (['bassDrum', 'snareDrum', 'cymbal'].includes(noteRow)) {\n      note = NOTES[noteRow][Math.floor(i / loopLength * 4)];\n    } else {\n      note = NOTES[noteRow][Math.floor(i / loopLength * 4)] + (noteRow.includes('bass') ? 3 : 5);\n    }\n    return note;\n  }\n\n  const getNoteName = (noteRow, i) => {\n    let noteName;\n    if (['bassDrum', 'snareDrum', 'cymbal'].includes(noteRow)) {\n      noteName = noteRow[0].toUpperCase() + (noteRow === 'cymbal' ? '' : 'D');\n    } else {\n      noteName = NOTES[noteRow][Math.floor(i / loopLength * 4)]\n    }\n    return noteName;\n  }\n\n  // const columns = [];\n\n  const chordLength = i => {\n    let start = i * loopLength / 4;\n    const end = start + loopLength / 4;\n    const chordLength = [];\n    for (; start < end; start++) chordLength.push(start)\n    return chordLength\n  }\n\n  // columns.push(\n  return (\n    <>\n      {[0, 1, 2, 3].map(i =>\n        < Col\n          // title={prog[i]}\n          // type=\"inner\"\n          style={{\n            marginBottom: '1rem',\n            boxShadow: '.1rem .1rem .2rem grey'\n          }}\n        >\n          {Object.keys(noteSwitches).map(noteRow =>\n            <Row>\n              {/* {Object.keys(noteSwitches[noteRow])\n                .filter((beat) => beat >= i * loopLength / 4 && beat < i * loopLength / 4 + loopLength / 4) */}\n                {chordLength(i).map(beat =>\n                <Button\n                  shape=\"circle\"\n                  onClick={() => {\n                    const note = getNote(noteRow, beat)\n                    addSynth(beat, note, noteRow)\n                  }}\n                  key={beat}\n                  style={{ overflow: 'hidden' }}\n                >\n                  {/* <Text>{currentBeat}</Text> */}\n                  <ButtonLabel\n                    beat={noteSwitches[noteRow][beat]}\n                    active={String(beat) === String(currentBeat)}\n                    note={getNoteName(noteRow, beat)}\n                  />\n                </Button>\n              )}\n              {['low', 'bassLow'].includes(noteRow) && <Divider />}\n            </Row>\n          )}\n        </Col>\n      )}\n      {/* <Divider \n        type=\"vertical\"\n        style={{ backgroundColor: 'black'}}\n        /> */}\n    </>\n  )\n  // )\n  // return columns;\n\n}",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":15},{"ruleId":"91","severity":1,"message":"95","line":1,"column":8,"nodeType":"93","messageId":"94","endLine":1,"endColumn":19},{"ruleId":"91","severity":1,"message":"96","line":16,"column":3,"nodeType":"93","messageId":"94","endLine":16,"endColumn":9},{"ruleId":"91","severity":1,"message":"97","line":17,"column":3,"nodeType":"93","messageId":"94","endLine":17,"endColumn":10},{"ruleId":"98","severity":1,"message":"99","line":21,"column":33,"nodeType":"100","messageId":"101","endLine":23,"endColumn":2},{"ruleId":"91","severity":1,"message":"102","line":26,"column":5,"nodeType":"93","messageId":"94","endLine":26,"endColumn":16},{"ruleId":"91","severity":1,"message":"103","line":34,"column":9,"nodeType":"93","messageId":"94","endLine":34,"endColumn":17},{"ruleId":"91","severity":1,"message":"104","line":58,"column":9,"nodeType":"93","messageId":"94","endLine":58,"endColumn":16},{"ruleId":"91","severity":1,"message":"105","line":68,"column":9,"nodeType":"93","messageId":"94","endLine":68,"endColumn":20},{"ruleId":"91","severity":1,"message":"106","line":122,"column":10,"nodeType":"93","messageId":"94","endLine":122,"endColumn":14},{"ruleId":"91","severity":1,"message":"107","line":5,"column":9,"nodeType":"93","messageId":"94","endLine":5,"endColumn":13},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'NoteRow' is defined but never used.","Identifier","unusedVar","'ButtonLabel' is defined but never used.","'Button' is defined but never used.","'Divider' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'currentBeat' is assigned a value but never used.","'addSynth' is assigned a value but never used.","'getNote' is assigned a value but never used.","'getNoteName' is assigned a value but never used.","'Icon' is defined but never used.","'Text' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]